\input texinfo	@c -*-texinfo
@c %**start of header
@setfilename vrtater.info
@include version.texi
@c other vars
@set DEVELOP @uref{http://savannah.nongnu.org/projects/vrtater/}
@c end vars
@settitle vrtater @value{VERSION}
@c %**end of header
@copying
This manual is for vrtater (version @value{VERSION}, @value{UPDATED}),
GNU free software, supporting peer to peers 'virtual' 'reality'.

Copyright (C) 2013 J. A. Green

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections.  A copy of the license is included in the section
entitled ``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Texinfo documantation system
@direntry
* vrtater: (vrtater)Invoking vrtater.
* vrtater: (vrtater)Installing vrtater.
* vrtater: (vrtater)Adding to vrtater.
* vrtater: (vrtater)Hacking section.
* vrtater: (vrtater)Pre-alpha bulletin board.
* vrtater: (vrtater)Vector calls.
* vrtater: (vrtater)Selection buffers.
* vrtater: (vrtater)Transforms.
* vrtater: (vrtater)Glossary.
@end direntry

@titlepage
@title vrtater, GNU GFDL Peer to Peers VR Manual
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Jimmy Green @email{green8@@sdf-eu.org}
@page
@vskip 0pt plus lfilll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top vrtater Peer to Peers VR (pre-alpha)

Create or add to virtual worlds... Optionally connect them over The Internet.

@center vrtater

vrtater is GNU free software, and as such, the freedom to share fully in it's
current and future benefits is preserved for anyone who uses or adds to it.
With current supporting libraries heretofore mentioned, it provides a route
towards a realized peer to peers 'virtual' 'reality' enviornment, where people
running vrtater nodes may determine the dialog and the virtual worlds that
they create and then interact through.  Nodes are always peers, providing all
chosen GNU free software vrtater features.

For IO and feedback, vrtater is written to be generic and inclusive for any GNU
or GNU 'freindly' libraries mandated.  Currently, interfacing through
@file{X.h} (see: @uref{http://www.x.org/}) is being provided.  Provided also is
the rendering of vobs supported by @file{gl.h} and @file{glx.h} (see:
@uref{http://mesa3d.org/}).

Written in C, and still in pre-alpha state, vrtater already produces much of
the required mechanism for interacting, through 'virtual objects'(vobs) /w
haptic/other qualities.  Connecting vobspace nodes over the internet is
currently the first priority.

hapmaps (hmaps), the basic units of data for vrtater, are simplified vobs,
writable as a .vrtater file containing one or a set of hmaps based on defined
type hmapf_t.  hmaps and their founded geometry options are initially written
as stock like basic forms, to then be transformed by modeling functions and
drawn by rendering code.  Their generic nature is supported in all three
phases.  hmaps are designed to provide haptic feedback, vob intersection
feedback, and other qualities for vobs.

Rendering code strives to enhance hmaps, while adding non hmap rendering as
well.  Hardware may factor in to technique used.  hmaps will move around in
vobspace based on initial conditions and input, and the renderer may use these
hmaps to stoke non-hmap based drawing and animation. 

When the ip network code is added, hmaps may then be shared by logging into
other nodes with them.  When hashing code is added, each hmap authored by the
person running vrtater will have a hash name with high uniqueness that
identifies it.  When these names are generated using unique data that is only
available to the author, given name combined with node timestamp hmaps applied
when appearing on peer nodes, provides a workable authorship mechanism for the
3d works that hmaps represent.  These hmaps once shared may be copied, however
their unique patterns will have appeared first on vrtater nodes connected with
name given, then flowing to other nodes.  Given author will thus have a
workable claim of authorship for bragging rights purposes.

When re-connecting to any node, one may resume a previous session there,
provided that the node still has the previous session on hold.  In this way a
reputation may be cultivated continuously and shared hmaps may be preserved on
given node.

When the ip network code is added, multiple nodes will be able to connect
simultaneously to a given node.  The place where the interaction occurs is the
abstract notion of partial.  One may host reputations, groups, preserve held
maps, and offer an hmap describing partial with more hmaps therein.  This
is done by creating a flexible node.  Partial is always achieved by the first
continuing node that becomes partial with a flexible node.  Thereafter more
continuing nodes may join.  One may take as much .vrtater data with them when
partial as the person running vrtater with the flexible node predetermines,
while the flexible node has as limit determined by what they have for hardware.

The hmap describing partial that the flexible node provides, defines the
virtual spacial bound, a nodemap, and optionally any hmaps therein.  The
volumetric representation of hmaps becoming partial is also of issue where,
enough empty vobspace must exist at the arrival location for all hmaps
accompanying.

Alternately, node-orgin, the place where one begins when running vrtater, is
always present once the program is run.  It is similar to a node capable of
becoming partial except that you are the only one in there, and hmaps therein
never appear on other nodes.  One may create or reuse as many hmaps therein as
will fit in memory, and then optionally take those to partial as desired.  All
your created flexible nodes as well as nodes you are continuing appear
somewhere in your node-orgin at your discretion. These appear as nodemaps.
Within these exists partial vobspace if connected.

The capability for interaction of vobs in given partial will be as fully as
possible based on dialog and configuration maintained in the node that they
originate out of.  For example, each person running vrtater see's what their
own node presents, for their vobs, and for vobs eminating out of other nodes.
The renderer code tries it's best to present inbound vobs as they describe
themselv's, however, the person running vrtater has the final say.

Dialog may be carried by any given hmap, and may be used for communication
between people running vrtater and interacting in partial.  Other information
affecting only hmaps may also be carried therein, for example, description of
how the hmap would like to appear.  A dialog interface, combined with a node
interface will provide access to all selected transforms for hmaps available,
movement stimulus for hmaps, renderer configuration,  nodes partial, more...

Interfacing to system bus IO devices, is soon to commence.  The ip network
code, hashing of session names, rendering features and dialog interface, are
all now calling out for any who would add those, before someone else does less
so excellently.  Maintainer expertise is also in short supply.

For more information on development of vrtater see: @value{DEVELOP}. The
README, provided with the source, list's other references for what is going on.
@sp 1
@insertcopying
@end ifnottex

@menu
* Invoking vrtater::
* Installing vrtater:: 
* Adding to vrtater::
* Hacking section::
* Pre-alpha bulletin board::
* Vector functions::
* Selection buffers::
* Transforms::
* Glossary::
* GNU Free Documentation License::
* Index::
@end menu

@node Invoking vrtater
@chapter Invoking vrtater

@pindex vrtater
@cindex Information on invoking vrtater

@menu
* Synopsis::
* Options::
@end menu

@node Synopsis
@section Synopsis of vrtater command line options

vrtater calls GNU @code{getopt_long()} to parse it's command line options
therefore any single letter short options(example: @code{-f}), have a long
option(example: @code{--find-node}) form.  Optional parameters to command line
arguments that take them, for example @code{-d} with an optional parameter of
@code{0}, needs be given as @code{-d0} or @code{--diag=0}.

@node Options
@section vrtater Options

@table @option

@item --brief

Where applicable output console messages in breif format. (not yet implemented)

@item --diag[=@var{LEVEL}]
@itemx -d[@var{LEVEL}]

Run tug diagnostic, optionally at given LEVEL. (not yet implemented)
see: tug.c for more.

@item --find @var{URL}
@itemx -f @var{URL}

Start @command{vrtater} generating the currently preconfigured node-orgin
vobspace and search the internet for a remote node to connect to once therein.
The required argument is in the form of an node-partial vobspace @file{URL}.
(not yet implemented). Examples may be retreived by running vrtater --partials.
(not yet implemented)

@item --help
@itemx -?

Output vrtater command line usage message.  This will produce the most up to
date version of this section's contents.

@item --informal

If possible, abstract any console message output for readability.
(not yet implemented)

@item --orgin @var{DIR}
@itemx -o @var{DIR}

Start @command{vrtater} generating node-orgin vobspace defined in @file{DIR}.
(not yet implemented)

@item --partial @var{DIR}
@itemx -p @var{DIR}

Start @command{vrtater} generating node-partial vobspace defined in @file{DIR}.
(not yet implemented)

@item --verbose

Where applicable output console messages in verbose format.
(not yet implemented)

@item --version

Output vrtater disclaimers and versions.

@end table

@node Installing vrtater
@chapter Installing vrtater

@pindex vrtater
@cindex Information on installing vrtater

See INSTALL.  A copy should be included with the distributed files.

@node Adding to vrtater
@chapter Adding to vrtater

@pindex vrtater
@cindex Compiling the vrtater source

A snapshot of the latest milestone can be downloaded from:
@uref{http://git.savannah.gnu.org/gitweb/?p=vrtater.git}
Milestones are indicated in the commit message, and should compile an run.
See INSTALL for source distribution install and compile details.  
Email patches or maintainer status requests to: @email{green8@@sdf-eu.org}.
Maintainer status on Savannah is required to push to the repository.  Current
maintainers will evaluate any patches or requests to add to vrtater directly.

@node Hacking section
@chapter Hacking section

@pindex vrtater
@cindex Hacking section

session description level bits.

Preliminary, yet mostly resolved.  A flexible node has a description and may
have adjunct calling node descriptions nearby in all_sessions.  A continuing
node has only a single description related to itself.  Listed are the bitmask,
proposed informational equivalent, and breif description.  Informational list's
as per ifnode**.c determinate in interface part.

VRT_MASK_SESSION_DETACHED ("DETACHED ")
Informational vs. flexible node.  Not partial.

VRT_MASK_SESSION_INBOUND ("FLEXIBLE ")
Describes flexible node, not detached, enabled, called, and may be partial.

VRT_MASK_SESSION_ENABLE ("VOBSPACE ")
Describes flexible node ready for partial.

VRT_MASK_SESSION_CALLED ("CALLED ")
Request for partial underway with flexible node described weather calling
or called.

VRT_MASK_SESSION_CONTINUITY ("NODEMAP ")
A continuing node is currently evaluating partial with flexible node described
weather calling or called.

VRT_MASK_SESSION_USEPASSWD ("AUTH ")
This flexible requires password authentication when receiving call.

VRT_MASK_SESSION_PARTIAL ("PARTIAL "(informational=inbound?"CONTINUING ":""))
This node is partial.

VRT_MASK_SESSION_NODELESS ("")
This session description has no implied node in node-orgin.  It is callable and
has one of three visual cue's, one where a continuing description with a
flexible, another where a flexible description in data for continuing.

VRT_MASK_SESSION_UNLINKED ("MOVED ")
This session description refers to a depreciated url, and has no implied node
in node-orgin.  It may still be called if a flexible node still resident and
has one of three visual cue's.

@node Pre-alpha bulletin board
@chapter Pre-alpha bulletin board

@pindex vrtater
@cindex Pre-alpha bulletin board

Proposed Free hmapwrapf Vertice Data Disclaimer.

This hmap has no disclaimer compatible with this one where vertices,
no matter how they are organized by hmapwrapf, are concerned.
Any vertice related disclaimer must remove this one or else
this disclaimer will be incompatible.

Short Version carries bit VRT_MASK_FREEHAPMAP and, if deemed best, a
minimal reference preceeding dialog.  The vertices of such hmaps
become recycle friendly, and bit VRT_MASK_FIXED_FORM may thus be
cleared at lesiure.

@node Vector functions
@chapter Vector functions

@pindex vrtater
@cindex Reference for calling vector functions

@multitable @columnfractions .25 .35 .4
@headitem What @tab Code @tab Description
@item for example
@tab @code{vf_t a, b, c;}
@tab of vf_t vector/coord struct
@item note
@tab
@tab all these functions return
@item
@tab
@tab vf_t *result unless specified
@item set
@tab @code{set_vf(&a, x, y, z, m);}
@tab a becomes set to given args
@item ...or...
@tab @code{set_vf(&a, x, y, z, 0);}
@tab then if desired form_mag_vf(&a)
@item copy
@tab @code{cp_vf(&a, &b);}
@tab b becomes a copy of a
@item calcmagnitude
@tab @code{form_mag_vf(&a);}
@tab calculates from (x, y, z, any)
@item
@tab
@tab for new (x, y, z, m')
@item length
@tab @code{length = (&a)->m;}
@tab 'length' (given direction and m)
@item magnifydir
@tab @code{tele_mag_vf(&a, m', &b);}
@tab scales well formed(correct m) in b
@item
@tab
@tab vector(x, y, z, m) to (x', y', z', m')
@item magnifydirz
@tab @code{tele_magz_vf(&a, n', &b);}
@tab b becomes a scaled by [+/-] n
@item
@tab
@tab given (x, y, z, ?) to (x', y', z', m')
@item
@tab
@tab if a is the null vector so is b
@item factor
@tab @code{factor_vf(&a, factor, &b);}
@tab b becomes a scaled by factor
@item invert
@tab @code{inv_vf(&a, &b);}
@tab b becomes inverted a
@item normalize
@tab @code{norm_vf(&a, &b);}
@tab expects non-zero magnitude or a divide
@item
@tab
@tab by zero error occurs
@item
@tab
@tab b becomes vector normal of a
@item normalizez
@tab @code{normz_vf(&a, &b);}
@tab adjusts/calc's magnitude if zero given
@item
@tab
@tab b becomes vector normal of a
@item
@tab
@tab !!has predictable result _if_ given
@item
@tab
@tab magnitude is not dependant on external
@item
@tab
@tab input.
@item dotproduct
@tab @code{dprod_vf(&a, &b);}
@tab returns dot product result as float
@item crossproduct
@tab @code{cprod_vf(&a, &b, &c);}
@tab c becomes cross product
@item +
@tab @code{sum_vf(&a, &b, &c);}
@tab c becomes sum of a and b
@item summagnitudes
@tab @code{sum_mf(&a, &b);}
@tab returns sum result as float
@item -
@tab @code{dif_vf(&a, &b, &c);}
@tab c becomes difference of a and b
@item difmagnitudes
@tab @code{dif_mf(&a, &b);}
@tab returns difference result as float
@item *
@tab @code{mult_vf(&a, &b, &c);}
@tab c becomes a scaled by b
@item mltmagnitudes
@tab @code{mult_mf(&a, &b);}
@tab returns product result as float
@item /
@tab @code{div_vf(&a, &b, &c);}
@tab c becomes quotient of a over b
@item divmagnitudes
@tab @code{div_mf(&a, &b);}
@tab returns float quotient (&a)->m/(&b)->m
@end multitable

@multitable @columnfractions .25 .35 .4
@headitem Examples @tab Code @tab Description
@item +=
@tab @code{sum_vf(&a, &b, &a);}
@tab note: as above, last vf_t *arg is &result
@item
@tab
@tab save for those functions returning float
@item -=
@tab @code{dif_vf(&a, &b, &a);}
@tab *=, /=, work likewise
@item *2
@tab @code{sum_vf(&a, &a, &a);}
@tab same approach works for all of the above
@item *-1
@tab @code{tele_magz_vf(&a, &b, -1);}
@tab same as inv_vf
@end multitable

For a more extensive example of usage see: src/rotation.c (rotate_vf) that
performs axis-angle rotation using these calls.

note: Using the above functions exclusively on type vf_t data, it seems
logically the case, although full testing has not been completed, that assuming
any magnitude is not already negative, one may insure against this occuring by
always providing only positive scale arguments to tele_mag_vf, factor_vf, and
set_vf.  tele_magz_vf, the only other function here that takes a scale argument
accepts both signed or unsigned.

@node Selection buffers
@chapter Selection buffers

@pindex vrtater
@cindex Reference for using selection buffers

Reference for using selection buffers

When hmaps are to be treated as a group, usually when changing them in some way
with a transform, references to these are placed in one or both of the a and b
selection buffers.  Where values are known in advance, it is best to reference
the specific selection buffers, the hmaps, and the specific count of hmaps for
each selection before compiling.

For now see examples in the source that call any function in transform.c.

@node Transforms
@chapter Transforms

@pindex vrtater
@cindex Documentation of Available Transforms

Documentation of Available Transforms

When hmaps are changed in any way, functions in transform.c are used where
possible.  References to the hmaps are first placed in the selection buffers.
These transform functions vary on the basis of what is and should be selected.

Type c hmaps are fairly stable, and have their verticies sequenced for drawing
from top to bottom or the inverse.  Drawing inversely also inverts all surface
normals automatically.  These are postfixed with _c in their function name.
See stock.c for examples.

For now see transform.c for more.

@node Glossary
@chapter Glossary

@pindex vrtater
@cindex Glossary of proposed vrtater name lexicon.

@multitable @columnfractions 1 2 7

@item
@tab hmap
@tab File/data defining haptic/other VR representation
@item
@tab
@tab qualities (also map(in context), hapmap).  Formatted as
@item
@tab
@tab a file a hapmap of name is given a .vrtater extension.
@item
@tab vohspace
@tab hmap data and pointer memory active in running program.
@item
@tab session [number]
@tab Hash of a usually unique session associated fileset.
@item
@tab mapname
@tab hmap session number with appended sequence and related
@item
@tab
@tab vohspace index.
@item
@tab composite [h]map
@tab hmap file or it's data containing multiple hmaps.
@item
@tab trunk[ ]map
@tab First map in composite hmap set with tree maps therein.
@item
@tab tree[ ]map
@tab Other maps in composite hmap set following trunk map.
@item
@tab key[ ]map
@tab First map in trunk[/tree] set.
@item
@tab key[ ]name
@tab Session number of a keymap.
@item
@tab sign-in name
@tab Session number per dialog group member matching keyname.
@item
@tab group[ ]map
@tab Group hmap artifact.  First in groupset.  trunkmap.
@item
@tab group[ ]set
@tab Set of trunkmaps.  groupmap [+ trunkmap set compounded].
@item
@tab loginkey
@tab Avatar's keymap when vrtlogging flexible node.
@item
@tab lastkey
@tab loginkey from last continued session.
@item
@tab contingentkey
@tab lastkey from previous to last continued session.
@item
@tab holdkey
@tab mapname of keymap with hold bit set containing maps to
@item
@tab
@tab be held on flexible.  Written if selected on vrtlogging.
@item
@tab
@tab Overwrites holdbkp if holdkey not popped on logout.
@item
@tab holdbkp
@tab holdkey from a previous vrtlogin or copy of holdkey.
@item
@tab
@tab Used as sign-in name for dialog groups.
@item
@tab zero_session
@tab null session number with null sequence appended.
@item
@tab partial
@tab Peer to peers shared vobspace.
@item
@tab [vrtater] node
@tab flexible or continuing, node's may become partial.
@item
@tab nodemap
@tab hmap sent by flexible node defining given partial
@item
@tab
@tab volumetrically.
@item
@tab node-orgin
@tab Insulated vobspace.  partial vobspace capable nodes
@item
@tab
@tab are created or generated somewhere in the volumetric
@item
@tab
@tab representation herein based on config.
@item
@tab vob[space]
@tab Rendered VR representation.  vob (unitary thereto).
@item
@tab fov
@tab Feild of view (fov0 (hmap holding the primary display)).
@item
@tab oa_fp
@tab Vector endpoint on optical axis at focal plane.
@item
@tab vpt
@tab Pointer to oa_fp(view point).
@end multitable


@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@node Index
@unnumbered Index

@printindex cp

@bye
